name: WorkProfile CI/CD

on:
  push:
    branches:
      - main

# שימו לב: אין כאן | lower - ה-IMAGE_NAME הוא רק בסיס
env:
  BASE_IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  build_and_test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      # שלב חדש: קביעת שם התמונה המלא באותיות קטנות (לצורך תאימות GHCR)
      - name: Set lowercase image name
        id: set_image_name
        run: |
          # המרה לשמות משתמש ומאגר באותיות קטנות
          REPO_OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LOWERCASE=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          FULL_IMAGE_NAME="ghcr.io/$REPO_OWNER_LOWERCASE/$REPO_NAME_LOWERCASE"
          echo "full_image_name=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT


      - name: Get the latest tag from the repository and increment patch version
        id: increment_version
        run: |
          git fetch --tags
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$latest_tag" ]; then
            new_tag="1.0.0"
          else
            # הסר את 'v' מתגיות קיימות לפני חישוב
            major=$(echo $latest_tag | cut -d '.' -f 1 | sed 's/v//')
            minor=$(echo $latest_tag | cut -d '.' -f 2)
            patch=$(echo $latest_tag | cut -d '.' -f 3)
            patch=$((patch + 1))
            new_tag="${major}.${minor}.${patch}"
          fi
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          # בניית התמונה עם התגית החדשה (לשימוש מקומי ב-CI)
          docker buildx build --load --tag ${{ steps.set_image_name.outputs.full_image_name }}:v${{ steps.increment_version.outputs.new_tag }} .

      - name: Run Docker container
        run: |
          # הרצת הקונטיינר לבדיקות
          docker run -d -p 8080:5000 --name workprofile-test-app ${{ steps.set_image_name.outputs.full_image_name }}:v${{ steps.increment_version.outputs.new_tag }}

      - name: Wait for app to be ready
        run: |
          for i in {1..15}; do
            if curl -s http://localhost:8080/health | grep -q "Application: Healthy"; then
              echo "App is ready!"
              exit 0
            fi
            echo "Waiting for app to be ready..."
            sleep 2
          done
          echo "App did not become ready in time." && exit 1

      - name: Test root endpoint "/"
        run: |
          response_root=$(curl -s http://localhost:8080/)
          if echo "$response_root" | grep -q "DB Host:" && \
             echo "$response_root" | grep -q "Add Person" && \
             echo "$response_root" | grep -q "John Doe"; then
            echo "Root API test passed."
          else
            echo "Root API test FAILED. Response: $response_root"
            exit 1
          fi

      - name: Test health endpoint "/health"
        run: |
          response_health=$(curl -s http://localhost:8080/health)
          if echo "$response_health" | grep -q "Application: Healthy"; then
            echo "/health API test passed."
          else
            echo "/health API test FAILED. Response: $response_health"
            exit 1
          fi

      - name: Stop and remove container
        if: always()
        run: |
          docker rm -f workprofile-test-app || true

      - name: Push Git tag
        uses: actions/github-script@v6
        with:
          script: |
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'refs/tags/v' + '${{ steps.increment_version.outputs.new_tag }}',
                sha: context.sha
              });
              console.log('Successfully created Git tag: v' + '${{ steps.increment_version.outputs.new_tag }}');
            } catch (error) {
              if (error.status === 422 && error.data.message.includes('Reference already exists')) {
                console.log('Git tag already exists, skipping creation.');
              } else {
                throw error;
              }
            }


  publish:
    runs-on: ubuntu-latest
    needs: build_and_test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set lowercase image name for publish
        id: set_image_name_publish
        run: |
          REPO_OWNER_LOWERCASE=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          REPO_NAME_LOWERCASE=$(echo "${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          FULL_IMAGE_NAME="ghcr.io/$REPO_OWNER_LOWERCASE/$REPO_NAME_LOWERCASE"
          echo "full_image_name=$FULL_IMAGE_NAME" >> $GITHUB_OUTPUT

      - name: Get the tag from build_and_test job
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag -l "v*" | sort -V | tail -n 1)
          echo "new_tag=$(echo $latest_tag | sed 's/^v//')" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry (GHCR)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ steps.set_image_name_publish.outputs.full_image_name }}:v${{ steps.get_tag.outputs.new_tag }}
            ${{ steps.set_image_name_publish.outputs.full_image_name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max